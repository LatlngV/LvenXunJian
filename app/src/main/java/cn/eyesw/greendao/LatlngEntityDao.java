package cn.eyesw.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.eyesw.lvenxunjian.bean.LatlngEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LATLNG_ENTITY".
*/
public class LatlngEntityDao extends AbstractDao<LatlngEntity, Void> {

    public static final String TABLENAME = "LATLNG_ENTITY";

    /**
     * Properties of entity LatlngEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Latitude = new Property(0, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(1, double.class, "longitude", false, "LONGITUDE");
        public final static Property Flag = new Property(2, String.class, "flag", false, "FLAG");
    }


    public LatlngEntityDao(DaoConfig config) {
        super(config);
    }
    
    public LatlngEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LATLNG_ENTITY\" (" + //
                "\"LATITUDE\" REAL NOT NULL ," + // 0: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 1: longitude
                "\"FLAG\" TEXT);"); // 2: flag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LATLNG_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LatlngEntity entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getLatitude());
        stmt.bindDouble(2, entity.getLongitude());
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(3, flag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LatlngEntity entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getLatitude());
        stmt.bindDouble(2, entity.getLongitude());
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(3, flag);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LatlngEntity readEntity(Cursor cursor, int offset) {
        LatlngEntity entity = new LatlngEntity( //
            cursor.getDouble(offset + 0), // latitude
            cursor.getDouble(offset + 1), // longitude
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // flag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LatlngEntity entity, int offset) {
        entity.setLatitude(cursor.getDouble(offset + 0));
        entity.setLongitude(cursor.getDouble(offset + 1));
        entity.setFlag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LatlngEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LatlngEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(LatlngEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
