package cn.eyesw.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import cn.eyesw.lvenxunjian.bean.PipelinePointBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PIPELINE_POINT_BEAN".
*/
public class PipelinePointBeanDao extends AbstractDao<PipelinePointBean, Void> {

    public static final String TABLENAME = "PIPELINE_POINT_BEAN";

    /**
     * Properties of entity PipelinePointBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Latitude = new Property(0, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(1, double.class, "longitude", false, "LONGITUDE");
        public final static Property PipelineId = new Property(2, long.class, "pipelineId", false, "PIPELINE_ID");
    }

    private Query<PipelinePointBean> pipelineBean_PipelinePointBeanListQuery;

    public PipelinePointBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PipelinePointBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PIPELINE_POINT_BEAN\" (" + //
                "\"LATITUDE\" REAL NOT NULL ," + // 0: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 1: longitude
                "\"PIPELINE_ID\" INTEGER NOT NULL );"); // 2: pipelineId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PIPELINE_POINT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PipelinePointBean entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getLatitude());
        stmt.bindDouble(2, entity.getLongitude());
        stmt.bindLong(3, entity.getPipelineId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PipelinePointBean entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getLatitude());
        stmt.bindDouble(2, entity.getLongitude());
        stmt.bindLong(3, entity.getPipelineId());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PipelinePointBean readEntity(Cursor cursor, int offset) {
        PipelinePointBean entity = new PipelinePointBean( //
            cursor.getDouble(offset + 0), // latitude
            cursor.getDouble(offset + 1), // longitude
            cursor.getLong(offset + 2) // pipelineId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PipelinePointBean entity, int offset) {
        entity.setLatitude(cursor.getDouble(offset + 0));
        entity.setLongitude(cursor.getDouble(offset + 1));
        entity.setPipelineId(cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PipelinePointBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PipelinePointBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(PipelinePointBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "pipelinePointBeanList" to-many relationship of PipelineBean. */
    public List<PipelinePointBean> _queryPipelineBean_PipelinePointBeanList(long pipelineId) {
        synchronized (this) {
            if (pipelineBean_PipelinePointBeanListQuery == null) {
                QueryBuilder<PipelinePointBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PipelineId.eq(null));
                pipelineBean_PipelinePointBeanListQuery = queryBuilder.build();
            }
        }
        Query<PipelinePointBean> query = pipelineBean_PipelinePointBeanListQuery.forCurrentThread();
        query.setParameter(0, pipelineId);
        return query.list();
    }

}
